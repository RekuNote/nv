#!/bin/bash

# NV Package Manager Client

# Configuration
REPOS_DIR="$HOME/.nv_repos"
REPO_LIST_FILE="$REPOS_DIR/repos.json"
PACKAGES_DIR="$REPOS_DIR/packages"
PACKAGES_TXT="$REPOS_DIR/packages.txt"
SCRIPT_URL="https://raw.githubusercontent.com/RekuNote/nv/main/nv"

# Colors
RESET_COLOR='\033[0m'
INFO_COLOR='\033[1;34m'
ERROR_COLOR='\033[1;31m'
PACKAGE_COLOR='\033[1;32m'  # Lime green for package names

# Function to display usage
function display_usage {
    echo -e "\n${INFO_COLOR}Usage: nv [arguments...]${RESET_COLOR}"
    echo -e "  update           - Update the local package list from all repositories."
    echo -e "  install <pkg>    - Install the specified package."
    echo -e "  list             - List installed packages."
    echo -e "  list --repo <url> - List packages from a specific repository or all repositories if no URL is provided."
    echo -e "  list-repos       - List all added repositories."
    echo -e "  add-repo <url>   - Add a new repository URL."
    echo -e "  remove-repo <url>- Remove a repository URL."
    echo -e "  remove <pkg>     - Remove the specified package."
    echo -e "  --upgrade-nv     - Check for newer versions of nv.\n"
}

# Function to check if running with sudo
function check_sudo {
    if [ "$(id -u)" -ne 0 ]; then
        echo -e "${ERROR_COLOR}use sudo 🐒${RESET_COLOR}"
        exit 1
    fi
}

# Function to initialize the configuration
function setup_nv {
    if [ ! -d "$REPOS_DIR" ]; then
        echo "Creating NV repos directory: $REPOS_DIR"
        mkdir -p "$PACKAGES_DIR"
    fi

    # Initialize repos.json and packages.txt if they don't exist
    if [ ! -f "$REPO_LIST_FILE" ]; then
        echo "[]" > "$REPO_LIST_FILE"
    fi

    if [ ! -f "$PACKAGES_TXT" ]; then
        echo "" > "$PACKAGES_TXT"
    fi

    # Add default repository if this is the first run
    if [ "$(jq '. | length' "$REPO_LIST_FILE")" -eq 0 ]; then
        add_repo "https://www.reximemo.net/repo"
    fi

    # Set up command not found handler if not already set
    local shell_config_file
    if [ -n "$BASH_VERSION" ]; then
        shell_config_file="$HOME/.bashrc"
    elif [ -n "$ZSH_VERSION" ]; then
        shell_config_file="$HOME/.zshrc"
    else
        echo -e "${ERROR_COLOR}Unsupported shell. Please manually configure the command not found handler.${RESET_COLOR}"
        return
    fi

    # Check if the custom command_not_found_handle function is already present
    if ! grep -q 'command_not_found_handle()' "$shell_config_file"; then
        echo "Adding command not found handler to $shell_config_file"

        cat << 'EOF' >> "$shell_config_file"

# Custom command not found handler for nv
command_not_found_handle() {
    local command="$1"
    local REPOS_DIR="$HOME/.nv_repos"
    local PACKAGES_TXT="$REPOS_DIR/packages/packages.txt"

    # Check if the command is available in the local package list
    if grep -q "^${command} " "$PACKAGES_TXT"; then
        echo -e "\nCommand '${command}' not found, but can be installed with:\n"
        echo -e "sudo nv install ${command}\n"
    else
        # Default behavior if not found in nv package list
        echo -e "\nCommand '${command}' not found, but can be installed with:\n"
        echo -e "sudo apt install ${command}\n"
    fi
}
EOF

        echo -e "${INFO_COLOR}Custom command not found handler added to $shell_config_file. Please restart your shell session or run 'source $shell_config_file' to apply changes.${RESET_COLOR}"
    else
        echo -e "${INFO_COLOR}Custom command not found handler already set up in $shell_config_file.${RESET_COLOR}"
    fi
}

# Function to update local package list
function update {
    echo "Updating local package list..."
    rm -f "$PACKAGES_TXT"
    touch "$PACKAGES_TXT"

    jq -r '.[] | .url' "$REPO_LIST_FILE" | while read -r repo; do
        echo "Fetching package list from $repo"
        raw_response=$(curl -s "$repo/packages.txt")
        if [ $? -ne 0 ]; then
            echo -e "${ERROR_COLOR}Error fetching $repo/packages.txt${RESET_COLOR}"
            continue
        fi
        echo "Raw response from $repo/packages.txt:"
        echo "$raw_response"
        
        echo "$raw_response" | while read -r line; do
            package_name=$(echo "$line" | awk '{print $1}')
            package_file=$(echo "$line" | awk '{print $2}')
            full_url="$repo/$package_file"
            echo "$package_name $full_url" >> "$PACKAGES_TXT"
        done
    done

    echo -e "${INFO_COLOR}💖 Local package list updated successfully!${RESET_COLOR}"
}

# Function to install a package
function install_package {
    local package_name="$1"
    if [ ! -f "$PACKAGES_TXT" ]; then
        echo -e "${ERROR_COLOR}Error: $PACKAGES_TXT not found. Please run 'nv update' first.${RESET_COLOR}"
        exit 1
    fi

    local package_file
    package_file=$(grep "^$package_name " "$PACKAGES_TXT" | awk '{print $2}')

    if [ -z "$package_file" ]; then
        echo -e "${ERROR_COLOR}Package ${PACKAGE_COLOR}$package_name${RESET_COLOR} not found in any repository.${RESET_COLOR}"
        exit 1
    fi

    local package_path="$PACKAGES_DIR/$(basename "$package_file")"
    if [ ! -f "$package_path" ]; then
        echo "Downloading package file from repository: $package_file"
        if ! curl -s -o "$package_path" "$package_file"; then
            echo -e "${ERROR_COLOR}Error downloading package: $package_file${RESET_COLOR}"
            exit 1
        fi
    fi

    echo "Installing package: ${PACKAGE_COLOR}$package_name${RESET_COLOR}"
    sudo dpkg -i "$package_path"
    sudo apt-get install -f
    echo -e "${INFO_COLOR}💕 $package_name was installed successfully!${RESET_COLOR}"
}

# Function to list installed packages
function list_installed {
    dpkg -l | grep '^ii' | awk '{print $2}'
}

# Function to list all packages in all repos
function list_all_packages {
    if [ -f "$PACKAGES_TXT" ]; then
        cat "$PACKAGES_TXT"
    else
        echo -e "${INFO_COLOR}No packages available.${RESET_COLOR}"
    fi
}

# Function to list packages in a specific repo
function list_repo_packages {
    local repo_url="$1"
    curl -s "$repo_url/packages.txt"
}

# Function to list all added repositories
function list_repos {
    if [ -f "$REPO_LIST_FILE" ]; then
        jq '.' "$REPO_LIST_FILE"
    else
        echo -e "${INFO_COLOR}No repositories added.${RESET_COLOR}"
    fi
}

# Function to add a repository
function add_repo {
    local repo_url="$1"
    # Remove trailing slash if present
    repo_url=$(echo "$repo_url" | sed 's:/*$::')
    if jq -e --arg url "$repo_url" '.[] | .url == $url' "$REPO_LIST_FILE" > /dev/null; then
        echo -e "${INFO_COLOR}Repository ${PACKAGE_COLOR}$repo_url${RESET_COLOR} already added.${RESET_COLOR}"
    else
        jq --arg url "$repo_url" '. += [{"url": $url}]' "$REPO_LIST_FILE" > "$REPO_LIST_FILE.tmp"
        mv "$REPO_LIST_FILE.tmp" "$REPO_LIST_FILE"
        echo -e "${INFO_COLOR}Added repository: ${PACKAGE_COLOR}$repo_url${RESET_COLOR}"
    fi
}

# Function to remove a repository
function remove_repo {
    local repo_url="$1"
    if jq -e --arg url "$repo_url" '.[] | .url == $url' "$REPO_LIST_FILE" > /dev/null; then
        jq --arg url "$repo_url" 'del(.[] | select(.url == $url))' "$REPO_LIST_FILE" > "$REPO_LIST_FILE.tmp"
        mv "$REPO_LIST_FILE.tmp" "$REPO_LIST_FILE"
        echo -e "${INFO_COLOR}Removed repository: ${PACKAGE_COLOR}$repo_url${RESET_COLOR}"
    else
        echo -e "${ERROR_COLOR}Repository ${PACKAGE_COLOR}$repo_url${RESET_COLOR} not found.${RESET_COLOR}"
    fi
}

# Function to remove a package
function remove_package {
    local package_name="$1"
    if dpkg -l | grep -q "^ii  $package_name "; then
        echo "Removing package: ${PACKAGE_COLOR}$package_name${RESET_COLOR}"
        sudo apt-get remove --purge "$package_name" -y
        echo -e "${INFO_COLOR}💔 $package_name was removed successfully!${RESET_COLOR}"
    else
        echo -e "${ERROR_COLOR}Package ${PACKAGE_COLOR}$package_name${RESET_COLOR} is not installed.${RESET_COLOR}"
    fi
}

# Function to check for newer versions of nv
function upgrade_nv {
    local current_version
    current_version=$(basename "$SCRIPT_URL" | sed 's/nv-//')
    echo "Current version: $current_version"

    latest_version=$(curl -s "$SCRIPT_URL" | grep -oP 'nv-\K[0-9.]+')

    if [ "$latest_version" != "$current_version" ]; then
        echo -e "${INFO_COLOR}A new version of nv is available: ${PACKAGE_COLOR}$latest_version${RESET_COLOR}"
        echo -e "Run 'sudo nv upgrade-nv' to update."
    else
        echo -e "${INFO_COLOR}You are using the latest version of nv.${RESET_COLOR}"
    fi
}

# Main function
function main {
    if [ "$#" -eq 0 ]; then
        display_usage
        exit 1
    fi

    local command="$1"
    shift

    case "$command" in
        update)
            update
            ;;
        install)
            install_package "$1"
            ;;
        list)
            if [ "$1" == "--repo" ]; then
                list_repo_packages "$2"
            else
                list_all_packages
            fi
            ;;
        list-repos)
            list_repos
            ;;
        add-repo)
            add_repo "$1"
            ;;
        remove-repo)
            remove_repo "$1"
            ;;
        remove)
            remove_package "$1"
            ;;
        --upgrade-nv)
            upgrade_nv
            ;;
        *)
            echo -e "${ERROR_COLOR}Unknown command: $command${RESET_COLOR}"
            display_usage
            exit 1
            ;;
    esac
}

# Run main function with passed arguments
main "$@"
