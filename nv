z#!/bin/bash

# NV Package Manager Client

# Configuration
REPOS_DIR="$HOME/.nv_repos"
REPO_LIST_FILE="$REPOS_DIR/repos.json"
PACKAGES_DIR="$REPOS_DIR/packages"
PACKAGES_TXT="$REPOS_DIR/packages.txt"
SCRIPT_URL="https://raw.githubusercontent.com/RekuNote/nv/main/nv"
BASHRC_PATH="$HOME/.bashrc"
ZSHRC_PATH="$HOME/.zshrc"
SHELL=$(basename "$SHELL")
NV_BIN_PATH="/usr/local/bin/nv"

# Colors
RESET_COLOR='\033[0m'
INFO_COLOR='\033[1;34m'
ERROR_COLOR='\033[1;31m'
PACKAGE_COLOR='\033[1;32m'

# Function to display version information
function show_version {
    local architecture=$(uname -m)  # Get the architecture
    echo "nv package manager ver 1.0.1 stable (release) ($architecture)"
}

# Function to display usage
function display_usage {
    echo -e "\n${INFO_COLOR}Usage: nv [arguments...]${RESET_COLOR}"
    echo -e "  update           - Update the local package list from all repositories."
    echo -e "  install <pkg>    - Install the specified package."
    echo -e "  list             - List installed packages."
    echo -e "  list --repo <url> - List packages from a specific repository or all repositories if no URL is provided."
    echo -e "  list-repos       - List all added repositories."
    echo -e "  add-repo <url>   - Add a new repository URL."
    echo -e "  remove-repo <url>- Remove a repository URL."
    echo -e "  remove <pkg>     - Remove the specified package."
    echo -e "  --upgrade-nv     - Check for newer versions of nv."
    echo -e "  --uninstall-nv   - Uninstall nv."
    echo -e "${INFO_COLOR}© RekuNote 2024${RESET_COLOR}\n"
}

# Function to check if running with sudo
function check_sudo {
    if [ "$(id -u)" -ne 0 ]; then
        echo -e "${ERROR_COLOR}use sudo 🐒${RESET_COLOR}"
        exit 1
    fi
}

# Function to initialize the configuration
function setup_nv {
    if [ ! -d "$REPOS_DIR" ]; then
        echo "Creating NV repos directory: $REPOS_DIR"
        mkdir -p "$PACKAGES_DIR"
    fi

    # Initialize repos.json and packages.txt if they don't exist
    if [ ! -f "$REPO_LIST_FILE" ]; then
        echo "[]" > "$REPO_LIST_FILE"
    fi

    if [ ! -f "$PACKAGES_TXT" ]; then
        echo "" > "$PACKAGES_TXT"
    fi

    # Add default repository if this is the first run
    if [ "$(jq '. | length' "$REPO_LIST_FILE")" -eq 0 ]; then
        add_repo "https://www.reximemo.net/repo"
    fi
}

# Function to update local package list
function update {
    echo "Updating local package list..."
    rm -f "$PACKAGES_TXT"
    touch "$PACKAGES_TXT"

    jq -r '.[] | .url' "$REPO_LIST_FILE" | while read -r repo; do
        echo "Fetching package list from $repo"
        raw_response=$(curl -s "$repo/packages.txt")
        if [ $? -ne 0 ]; then
            echo -e "${ERROR_COLOR}Error fetching $repo/packages.txt${RESET_COLOR}"
            continue
        fi
        echo "Raw response from $repo/packages.txt:"
        echo "$raw_response"
        
        echo "$raw_response" | while read -r line; do
            package_name=$(echo "$line" | awk '{print $1}')
            package_file=$(echo "$line" | awk '{print $2}')
            full_url="$repo/$package_file"
            echo "$package_name $full_url" >> "$PACKAGES_TXT"
        done
    done

    echo -e "${INFO_COLOR}💖 Local package list updated successfully!${RESET_COLOR}"
}

# Function to install a package
function install_package {
    local package_name="$1"
    if [ ! -f "$PACKAGES_TXT" ]; then
        echo -e "${ERROR_COLOR}Error: $PACKAGES_TXT not found. Please run 'nv update' first.${RESET_COLOR}"
        exit 1
    fi

    local package_file
    package_file=$(grep "^$package_name " "$PACKAGES_TXT" | awk '{print $2}')

    if [ -z "$package_file" ]; then
        echo -e "${ERROR_COLOR}Package ${PACKAGE_COLOR}$package_name${RESET_COLOR} not found in any repository.${RESET_COLOR}"
        exit 1
    fi

    local package_path="$PACKAGES_DIR/$(basename "$package_file")"
    if [ ! -f "$package_path" ]; then
        echo "Downloading package file from repository: $package_file"
        if ! curl -s -o "$package_path" "$package_file"; then
            echo -e "${ERROR_COLOR}Error downloading package: $package_file${RESET_COLOR}"
            exit 1
        fi
    fi

    echo "Installing package: ${PACKAGE_COLOR}$package_name${RESET_COLOR}"
    sudo dpkg -i "$package_path"
    sudo apt-get install -f
    echo -e "${INFO_COLOR}💕 $package_name was installed successfully!${RESET_COLOR}"
}

# Function to list installed packages
function list_installed {
    dpkg -l | grep '^ii' | awk '{print $2}'
}

# Function to list all packages in all repos
function list_all_packages {
    if [ -f "$PACKAGES_TXT" ]; then
        cat "$PACKAGES_TXT"
    else
        echo -e "${INFO_COLOR}No packages available.${RESET_COLOR}"
    fi
}

# Function to list packages in a specific repo
function list_repo_packages {
    local repo_url="$1"
    curl -s "$repo_url/packages.txt"
}

# Function to list all added repositories
function list_repos {
    if [ -f "$REPO_LIST_FILE" ]; then
        jq '.' "$REPO_LIST_FILE"
    else
        echo -e "${INFO_COLOR}No repositories added.${RESET_COLOR}"
    fi
}

# Function to add a repository
function add_repo {
    local repo_url="$1"
    # Remove trailing slash if present
    repo_url=$(echo "$repo_url" | sed 's:/*$::')
    if jq -e --arg url "$repo_url" '.[] | .url == $url' "$REPO_LIST_FILE" > /dev/null; then
        echo -e "${INFO_COLOR}Repository ${PACKAGE_COLOR}$repo_url${RESET_COLOR} already added.${RESET_COLOR}"
    else
        jq --arg url "$repo_url" '. += [{"url": $url}]' "$REPO_LIST_FILE" > "$REPO_LIST_FILE.tmp"
        mv "$REPO_LIST_FILE.tmp" "$REPO_LIST_FILE"
        echo -e "${INFO_COLOR}Added repository: ${PACKAGE_COLOR}$repo_url${RESET_COLOR}"
    fi
}

# Function to remove a repository
function remove_repo {
    local repo_url="$1"
    if jq -e --arg url "$repo_url" '.[] | .url == $url' "$REPO_LIST_FILE" > /dev/null; then
        jq --arg url "$repo_url" 'del(.[] | select(.url == $url))' "$REPO_LIST_FILE" > "$REPO_LIST_FILE.tmp"
        mv "$REPO_LIST_FILE.tmp" "$REPO_LIST_FILE"
        echo -e "${INFO_COLOR}Removed repository: ${PACKAGE_COLOR}$repo_url${RESET_COLOR}"
    else
        echo -e "${ERROR_COLOR}Repository ${PACKAGE_COLOR}$repo_url${RESET_COLOR} not found.${RESET_COLOR}"
    fi
}

# Function to remove a package
function remove_package {
    local package_name="$1"
    echo -e "Removing package: ${PACKAGE_COLOR}$package_name${RESET_COLOR}"
    sudo apt-get remove --purge "$package_name"
    echo -e "${INFO_COLOR}💔 $package_name was removed successfully.${RESET_COLOR}"
}

# Function to check and upgrade nv script
function upgrade_nv {
    local current_script="$0"
    local temp_script=$(mktemp)

    echo "Checking for updates..."

    # Download the latest script
    curl -s -o "$temp_script" "$SCRIPT_URL"
    if [ $? -ne 0 ]; then
        echo -e "${ERROR_COLOR}Error checking for updates.${RESET_COLOR}"
        rm "$temp_script"
        exit 1
    fi

    # Compare local script with remote script
    if cmp -s "$current_script" "$temp_script"; then
        echo -e "${INFO_COLOR}You already have the latest version of nv installed, silly.${RESET_COLOR}"
    else
        echo -e "${INFO_COLOR}An update is available for nv.${RESET_COLOR}"
        read -p "Do you want to update to the latest version? [y/N] " response
        case "$response" in
            [yY])
                echo "Updating nv..."
                cp "$temp_script" "$current_script"
                chmod +x "$current_script"
                echo -e "${INFO_COLOR}Successfully updated nv to the latest version! 🎉${RESET_COLOR}"
                ;;
            *)
                echo -e "${INFO_COLOR}Update canceled.${RESET_COLOR}"
                ;;
        esac
    fi

    rm "$temp_script"
}

# Function to uninstall nv
function uninstall_nv {
    echo -e "${INFO_COLOR}Are you sure you want to uninstall nv? [y/N]${RESET_COLOR}"
    read -r response
    case "$response" in
        [yY])
            echo "Uninstalling nv..."
            sudo rm -f "$NV_BIN_PATH"
            echo -e "${INFO_COLOR}Uninstallation complete. Bye. 💔${RESET_COLOR}"
            ;;
        *)
            echo -e "${INFO_COLOR}Uninstallation canceled.${RESET_COLOR}"
            ;;
    esac
    exit
}

# Ensure the script is executable and runs correctly after an update
function check_script {
    if [ ! -x "$0" ]; then
        echo -e "${ERROR_COLOR}nv is not executable. Please set execute permissions. (chmod +x)${RESET_COLOR}"
        exit 1
    fi
}

# Main script logic
if [ "$#" -lt 1 ]; then
    display_usage
    exit 1
fi

check_sudo

COMMAND="$1"
shift

setup_nv

case "$COMMAND" in
    update)
        update
        ;;
    install)
        if [ "$#" -ne 1 ]; then
            echo -e "${ERROR_COLOR}Usage: $0 install <package_name>${RESET_COLOR}"
            exit 1
        fi
        install_package "$1"
        ;;
    list)
        if [ "$#" -eq 0 ]; then
            list_installed
        elif [ "$#" -eq 2 ] && [ "$1" == "--repo" ]; then
            list_repo_packages "$2"
        else
            list_all_packages
        fi
        ;;
    list-repos)
        list_repos
        ;;
    add-repo)
        if [ "$#" -ne 1 ]; then
            echo -e "${ERROR_COLOR}Usage: $0 add-repo <repo_url>${RESET_COLOR}"
            exit 1
        fi
        add_repo "$1"
        ;;
    remove-repo)
        if [ "$#" -ne 1 ]; then
            echo -e "${ERROR_COLOR}Usage: $0 remove-repo <repo_url>${RESET_COLOR}"
            exit 1
        fi
        remove_repo "$1"
        ;;
    remove)
        if [ "$#" -ne 1 ]; then
            echo -e "${ERROR_COLOR}Usage: $0 remove <package_name>${RESET_COLOR}"
            exit 1
        fi
        remove_package "$1"
        ;;
    --upgrade-nv)
        upgrade_nv
        ;;
    --uninstall-nv)
        uninstall_nv
        ;;
    *)
        echo -e "${ERROR_COLOR}Invalid command.${RESET_COLOR}"
        display_usage
        exit 1
        ;;
esac
